package com.tiagolo.list{	import com.tiagolo.display.CustomSprite;	import com.tiagolo.list.events.ListEvent;		import flash.display.SimpleButton;	import flash.display.Sprite;	import flash.events.MouseEvent;		import gs.TweenLite;	[Event(type="com.tiagolo.list.events.ListEvent",name="itemClick")]	public class HList extends CustomSprite	{		public var itemRenderer:Class = BaseListRender;		public var botaoRenderer:Class = SimpleButton;		public var dataField:String = "imagem";		public var dataPath:String = "";		public var horizontalGap:int = 5;		public var cols:int = 4;		public var rows:int = 1;				protected var _dataProvider:Array;		protected var _displayList:Array = new Array();;				private var mascara:Sprite;		private var container:Sprite;				private var proximo:SimpleButton;		private var anterior:SimpleButton;				private var pages:int;		private var _currentPage:int;				public function HList()		{			super();								mascara = new Sprite();			mascara.name = "mascara";			addChild(mascara);						updateDisplayList(300,180);		}		public function get currentPage():int		{			return _currentPage;		}		public function set currentPage(v:int):void		{			_currentPage = v;			updateDisplayList(width,height);		}		public function get dataProvider():Array		{			return _dataProvider;		}		public function set dataProvider(v:Array):void		{					_dataProvider = v;			_displayList = new Array();						if(container && contains(container))	removeChild(container);					container = new Sprite();			container.name = "container";			container.mask = mascara;			addChild(container);						for each(var i:Object in v)			{				if(i)				{					var item:BaseListRender = new itemRenderer();						item.dataPath = dataPath;						item.dataField = dataField;						item.data = i;						item.addEventListener(MouseEvent.MOUSE_OVER,mouseOverHandler);						item.addEventListener(MouseEvent.MOUSE_OUT,mouseOutHandler);						item.addEventListener(MouseEvent.CLICK, clickHandler);											container.addChild(item);					_displayList.push(item);				}			}						updateDisplayList(width,height);		}				private function mouseOverHandler(event:MouseEvent):void		{			for each(var item:BaseListRender in _displayList)			{				if(item != event.currentTarget)				{					TweenLite.to(item,.3,{alpha:.3});				}			}		}		private function mouseOutHandler(event:MouseEvent):void		{			for each(var item:BaseListRender in _displayList)			{				TweenLite.to(item,.3,{alpha:1});			}		}				private function clickHandler(event:MouseEvent):void		{			var itemEvent:ListEvent = new ListEvent(ListEvent.ITEM_CLICK);			itemEvent.item = BaseListRender(event.currentTarget);			dispatchEvent(itemEvent);		}						private function proximoClickHandler(event:MouseEvent):void		{			if(pages-1 > currentPage)			currentPage++;		}		private function anteriorClickHandler(event:MouseEvent):void		{			if(currentPage > 0)			currentPage--;		}				override public function updateDisplayList(uWidth:Number, uHeight:Number):void		{			super.updateDisplayList(uWidth,uHeight);						mascara.graphics.clear();			mascara.graphics.beginFill(0,0);			mascara.graphics.drawRect(0,0,uWidth,uHeight);			mascara.graphics.endFill();						graphics.clear();			graphics.beginFill(0,0);			graphics.drawRect(0,0,uWidth,uHeight);			graphics.endFill();						var colCount:int = 0;			var rowCount:int = 0;			pages = 0;						var children:int = numChildren			for(var o:int; o < children;o++)			{				removeChildAt(0);			}						if(_displayList && _displayList.length)			{				addChild(mascara);				addChild(container);								var horizontalDif:Number = (uWidth - _displayList[0].width * cols)/cols;				var verticalDif:Number = (uHeight - _displayList[0].height * rows)/rows;												for(var i:int; i < _displayList.length; i++)				{					var item:BaseListRender = _displayList[i];					item.x = horizontalDif/2 + (item.width + horizontalDif) * colCount + pages * uWidth;					item.y = verticalDif/2 + (item.height + verticalDif) * rowCount;										item.updateDisplayList(item.width,item.height);										colCount++;										if(colCount >= cols)					{						colCount = 0;						rowCount++;												if(rowCount >= rows)						{							rowCount = 0;							pages++;						}					}				}			}						TweenLite.to(container,1,{x:-(currentPage * uWidth)});						if(pages && _displayList.length > rows * cols)			{				proximo = new botaoRenderer();				anterior = new botaoRenderer();				proximo.name = "proximo";				anterior.name = "anterior";				proximo.addEventListener(MouseEvent.CLICK,proximoClickHandler);				anterior.addEventListener(MouseEvent.CLICK,anteriorClickHandler);												container.y = -proximo.height;								addChild(proximo);				addChild(anterior);					proximo.x = uWidth/2;				proximo.y = uHeight - proximo.height - (verticalDif/2 - proximo.height/2);								anterior.scaleX = -1;				anterior.scaleY = -1;				anterior.x = proximo.x - anterior.width;				anterior.y = proximo.y + anterior.height;			}						pages++;		}	}}